// Access Git info from build script
plugins {
    id "application"
    id "org.ajoberstar.grgit" version "4.0.1"
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.jlink' version '2.17.5'
    id "com.diffplug.gradle.spotless" version "5.0.0"
}

import org.ajoberstar.grgit.Grgit

// Apply the java plugin to add support for Java
apply plugin: "base"
apply plugin: "application"
apply plugin: "java"
apply plugin: 'com.diffplug.gradle.spotless'

// Definitions
defaultTasks "clean", "build"
sourceCompatibility = 14
targetCompatibility = 14

// Used by gradle assemble & run tasks
mainClassName = "net.rptools.tokentool/net.rptools.tokentool.client.TokenTool"

// Custom properties
ext {
    def repo = Grgit.open(currentDir: file("."))
    def head = repo.head()
    def tags = repo.tag.list().find {
        it.commit == head
    }

    revision = head.abbreviatedId
    revisionFull = head.id

    if (tags) {
        tagVersion = tags.getName()
        msiVersion = tagVersion
        environment = "Production"
        sentryDSN = sentry_production_dsn
    } else {
        tagVersion = msiVersion
        project.description = "SNAPSHOT-" + revision
        environment = "Development"
        sentryDSN = sentry_development_dsn
    }


    // Unable to use non-semver tagging because of .msi restrictions
    // releaseDir = file("/releases/" + tagVersion + "/")
    releaseDir = file("/releases/")

    // vendor, tagVersion, msiVersion, and DSNs defaults are set in gradle.properties
    println "OS Detected: " + osdetector.os
    println "Configuring for " + project.name + " " + tagVersion + " by " + vendor
}

spotless {
    java {
        licenseHeaderFile 'spotless.license.java'
        googleJavaFormat()
    }

    format 'misc', {
        target '**/*.gradle', '**/.gitignore'

        // spotless has built-in rules for most basic formatting tasks
        trimTrailingWhitespace()
        // or spaces. Takes an integer argument if you don't like 4
        indentWithSpaces(4)
    }
}

// Default parameters for gradle run command
run {
    args = ["-v=" + tagVersion, "-vendor=" + vendor]
    applicationDefaultJvmArgs = ["-Dsentry.environment=Development", "-Dfile.encoding=UTF-8"]

    if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': tagVersion,
                'Implementation-Vendor': vendor,
                'Git-Commit': revision,
                'Git-Commit-SHA': revisionFull,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Source-Compatibility': project.sourceCompatibility,
                'Target-Compatibility': project.targetCompatibility,
                'Main-Class': project.mainClassName
    }
}

javafx {
    version = '14'
    modules = ['javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.graphics']
}

jlink {
    options = ['--strip-debug', '--strip-native-commands', '--compress', '2', '--no-header-files', '--no-man-pages']

    forceMerge('log4j-api', 'gson')

    launcher {
        name = 'TokenTool'
        args = ['-v=' + tagVersion, '-vendor=' + vendor]
        jvmArgs = ['-Dfile.encoding=UTF-8']
    }

    jpackage {
        // not working :(
        // installerOutputDir = releaseDir
        // installerOutputDir = file("releases")
        // imageOutputDir = file("$buildDir/my-packaging-image")
        outputDir = "../releases"

        imageOptions = []
        imageName = 'TokenTool'

        installerName = 'TokenTool'
        installerOptions = [
                '--verbose',
                '--description', project.description,
                '--copyright', 'Copyright 2000-2020 RPTools.net',
                '--license-file', 'package/license/COPYING.AFFERO',
                '--app-version', tagVersion,
                '--vendor', vendor
        ]

        if (osdetector.os.is('windows')) {
            println "Setting Windows installer options"
            imageOptions += ['--icon', 'package/windows/TokenTool.ico']
            installerOptions += [
                    '--win-dir-chooser',
                    '--win-per-user-install',
                    '--win-shortcut',
                    '--win-menu',
                    '--win-menu-group', 'RPTools'
            ]
        }

        if (osdetector.os.is('osx')) {
            println "Setting MacOS installer options"
            imageOptions += ['--icon', 'package/macosx/tokentool-icon.icns']
            installerOptions += [

            ]
        }

        if (osdetector.os.is('unix')) {
            println "Setting Linux installer options"
            imageOptions += ['--icon', 'package/linux/tokentool.png']
            installerOptions += [
                    '--linux-menu-group', 'RPTools',
                    '--linux-shortcut'
            ]

            // if (installerType == 'deb') {
            //     installerOptions += [
            //             '--linux-deb-maintainer', 'office@walczak.it'
            //     ]
            // }

            // if (installerType == 'rpm') {
            //     installerOptions += [
            //             '--linux-rpm-license-type', 'GPLv3'
            //     ]
            // }
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    // Logging
    annotationProcessor group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.1'

    // Note: log4j-1.2-api versions 2.12.1+ breaks logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.12.0'

    // Bridges v1 to v2 for other code in other libs
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    // implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'

    implementation group: 'io.sentry', name: 'sentry', version: '1.7.30'
    implementation group: 'io.sentry', name: 'sentry-log4j2', version: '1.7.30'
    implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    // For PDF image extraction
    implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.19'

    // To decrypt password/secured PDFs
    implementation group: 'org.bouncycastle', name: 'bcmail-jdk15on', version: '1.64'

    // For pdf image extraction, specifically for jpeg2000 (jpx) support.
    implementation group: 'com.github.jai-imageio', name: 'jai-imageio-core', version: '1.4.0'
    implementation group: 'com.github.jai-imageio', name: 'jai-imageio-jpeg2000', version: '1.3.0'

    // Image processing lib https://github.com/haraldk/TwelveMonkeys
    implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-core', version: '3.5'
    implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-jpeg', version: '3.5'
    implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-psd', version: '3.5'

    // Other public libs
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'org.reflections', name: 'reflections', version: '0.9.12'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
}

task configSentryRelease(type: Copy) {
    from("build-resources/sentry.properties.template")
    into("src/main/resources/")
    rename("sentry.properties.template", "sentry.properties")
    def tokens = [
            AppVersion : "${tagVersion}",
            Environment: "${environment}",
            SentryDSN  : "${sentryDSN}"
    ]
    expand(tokens)
    inputs.properties(tokens)
}

// Configure current release tag in Sentry.io properties
processResources.dependsOn configSentryRelease